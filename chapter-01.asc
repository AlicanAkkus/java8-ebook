== Lambda Expression nedir? Nasıl kullanırım?

Merhaba arkadaşlar;

Bugün sizlerle Java 8 (Project Lambda) ile Java ortamına katılan Lambda ifadelerinden (Lambda expression) bahsetmek istiyorum.

=== Lambda nedir?

Programlama dili çerçevesinde Lambda, anonim tekil görevler olarak değerlendirilebilir. Lambda deyimleri (Lambda fonksiyonları da denebilir), referans verilebilir ve tekrar tekrar kullanılabilirdir. Genel kullanım açısından Lambda fonksiyonları, diğer bir fonksiyona argüman olarak iletilebilirdir. Böylece, bir tarafta tanımlanan iş birimi, diğer bir iş biriminde koşturulabilir olmaktadır. Burada dikkat çekilecek unsur, bir iş biriminin diğer bir uygulama birimine referans olarak eriştirilebilirliğidir.

=== Javascript ile Lambda – Basit Giriş

Javascript dilinde `Array` sınıfının prototype alanında `forEach` isimli bir iş birimi (fonksiyon) bulunmaktadır. `forEach` fonksiyonu, parametre olarak bir anonim Javascript fonksiyonunu kabul etmektedir. `forEach` fonksiyonuna, parametre olarak tanımlanan anonim fonksiyon, `forEach` fonksiyonu içerisinde koşturulmaktadır. Bu sayede iş mantığı, diğer fonksiyona paslanmış olmaktadır.

*Örnek 1:*

[source,java]
----
var dizi = [1,2,3,4,5]; // Bir javascript dizisi

 // Anonim fonksiyon her bir elemanı çıktılıyor.
dizi.forEach(function(e){ //  (1)
    console.log("Eleman: ",e);
});

----

Yukarıda *(1)* numaralı kısımdaki anonim fonksiyon yani lambda fonksiyonu, forEach metodu içerisinde koşturulmaktadır. forEach metodu içerisindeki benzer yaklaşımı, kendi fonksiyonumuz ile oluşturalım.

[source,java]
----
var fonk= function(a,b,callback){
     // Lambda fonksiyonu "callback" burada koşturulur.
    return callback(a,b)*2; //  (2)
}

var result = fonk(2,3,function(a,b){ // (1)
     // Bu Lambda fonksiyonu 2 argümanı toplar.
    return a+b;
});

console.log("Sonuç ..: ",result); // Sonuç : (2+3)*2 = 10

----

Tekrar ederek, Lambda fonksiyonları için referans verilebilir iş birimleri denebilir. Bu yaklaşım bir çok programlama dilinde farklı biçimlerde yer alabilir, anlaşılabilirlik açısından ilk önce Javascript örneği vermeyi tercih ettim.

=== Lambda Java 8 öncesinde nasıldı?

Lambda birimleri (referans verilebilir iş birimleri), Java 8 evvelinde anonim sınıflar ile tanımlanabilmekteydi. Örnek 2’nin benzeri Java 8 evvelinde nasıl yazılıyordu?

Öncelikle bir iş birimi tipi gerekli, bu iş birimi 2 argüman kabul etmeli ve bir değer döndürmelidir. İş mantığı anonim olarak tanımlanacağı için, abstract sınıflar veya arayüzler kullanılabilir.

*Örnek 3*

[source,java]
----
public interface Anonim{
    public int call(int a, int b);
}
----

Anonim arayüz sözleşmesi, int türünden 2 değer alır ve bir int değer döndürür. Dikkat ederseniz sadece sözleşmenin maddesi tanımlandı, iş mantığı anonim olarak geliştirici tarafından tanımlanacak.

[source,java]
----
public class LambdaApp {

public static void main(String[] args) {
    
    LambdaApp app = new LambdaApp();
    
    // Örnek 2 (1) gibi
    app.fonk(2, 3, new Anonim() { // <1>
        @Override
        public int call(int a, int b) {
            return a + b;
        }
     });
    
}

// Örnek 2 (2) gibi
public int fonk(int a, int b, Anonim anonim) {
    return anonim.call(a, b) * 2; // <2>
};


}
----
<1> Anonim iş birimi burada tanımlanıyor
<2> Anonim iş birimi burada koşturuluyor 

=== Java 8 ve Lambda ifadeleri

LambdaApp sınıfının (1) numaralı kısmındaki anonim iş birimi, Javascript dilindeki karşılığına göre şu anda çok daha kompleks. 6 komut satırı yer işgal ediyor. Fakat bu fonksiyonun yaptığı tek iş var, 2 argüman almak ve toplayıp geri döndürmek. Bu anonim birimi sanıyorum şu biçimde temsil edebiliriz.

[source,java]
----
fn(a,b) -> (a+b);
----

Görüldüğü üzere tek bir satırda aynı işi gören anonim iş birimini yani lambda ifadesini yazdık. Aynı örneği şimdi Java 8 Lambda deyimi ile yazalım.

[source,java]
----
public interface Anonim{
    public int call(int a, int b);
}

public class LambdaAppJava8 {

public int fonk(int a, int b, Anonim anonim) {
    return anonim.call(a, b) * 2;
};

public static void main(String[] args) {

    LambdaAppJava8 app = new LambdaAppJava8();

    app.fonk(2, 3, (a, b) -> a + b); // Dikkat (1)
}

}
----

Görüldüğü üzere 6 satırlık anonim sınıf kullanımını, tek satıra düşürmüş olduk.

Lambda ifadeleri, Java 8 versiyonunun en çarpıcı yeniliklerinden biri. (Bkz. http://openjdk.java.net/projects/lambda/[Project Lambda]).

Sizler de Java 8 kullanmak istiyorsanız https://jdk8.java.net/ adresinden sisteminize kurabilirsiniz.

Bol Javalı günler dilerim.